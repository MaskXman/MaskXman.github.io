<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaskXman &#39;s Blog</title>
  
  <subtitle>Somebody has to win, so why not me!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maskxman.github.io/"/>
  <updated>2021-04-28T03:20:09.033Z</updated>
  <id>http://maskxman.github.io/</id>
  
  <author>
    <name>Mr. Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>桌面应用程序开发项目阶段性总结</title>
    <link href="http://maskxman.github.io/2020/12/13/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://maskxman.github.io/2020/12/13/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-13T05:58:11.044Z</published>
    <updated>2021-04-28T03:20:09.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StatisticalAnalysis统计分析软件项目阶段性总结"><a href="#StatisticalAnalysis统计分析软件项目阶段性总结" class="headerlink" title="StatisticalAnalysis统计分析软件项目阶段性总结"></a>StatisticalAnalysis统计分析软件项目阶段性总结</h2><hr><h3 id="StatisticalAnalysis项目背景"><a href="#StatisticalAnalysis项目背景" class="headerlink" title="StatisticalAnalysis项目背景"></a>StatisticalAnalysis项目背景</h3><p>&emsp;&emsp;这次项目用的编程语言是Java（后期可能会用C++），Java的SWT桌面应用程序开发。目前这个定位还是单机无数据库程序，学习成本不高，Java SWT，NatTable，RCP ，Eclipse，gitee分布式合作开发剩下的就是一些Java 的一些基础，解码器的数据分析存储到数据结构，调试环境等等。<strong>在前期学习的过程中，我认为最难的是NatTable的学习，在国内基本没有中文资料可以查阅，但是我负责整个项目最重要的的第一步数据的解码，存入数据结构，所以只能用读Eclipse官方开发小组的NatTable的源代码源文档了，对自己的英语水平再一次有了深刻的认识，，，心态炸裂</strong>，目前为止，我负责的项目模块（源数据文件导入模块，个案汇总及数据分析分析模块）已经基本完成了，但是我觉得我写的垃圾代码在寒假还得改改，优化一下我那笨拙的for循环。。。。。。</p><h3 id="NatTable的初识："><a href="#NatTable的初识：" class="headerlink" title="NatTable的初识："></a>NatTable的初识：</h3><p>&emsp;&emsp;Nebula NatTable —- high performance SWT data grid(高性能网格数据集)，支持处理大数据，动态实时更新。作为处理大数据的自定义虚拟网格部件，NatTable出乎意料的不会出现任何性能问题。</p><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><h5 id="表格、树和特殊布局："><a href="#表格、树和特殊布局：" class="headerlink" title="表格、树和特殊布局："></a>表格、树和特殊布局：</h5><ul><li>支持扩展/折叠行的树布局</li><li>🉑️跨越多个单元格</li><li>支持动态修改表格布局</li></ul><h5 id="更低的需求："><a href="#更低的需求：" class="headerlink" title="更低的需求："></a>更低的需求：</h5><ul><li>使用简单的接口链接数据模型</li><li>仅在需要时加载单元格，例如绘画</li></ul><h5 id="UI绑定："><a href="#UI绑定：" class="headerlink" title="UI绑定："></a>UI绑定：</h5><ul><li>可定制的实际值与记录值的转换器</li><li>支持单独渲染每一个单元格</li><li>可绑定鼠标事件的特性</li></ul><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><ul><li>支持选择行、列、单个单元格</li><li>支持宏定义键盘，鼠标</li><li>区域选择与固定避免滑动</li><li>区域扩展/折叠</li><li>多个分组级别</li></ul><h5 id="排序、筛选和查询"><a href="#排序、筛选和查询" class="headerlink" title="排序、筛选和查询"></a>排序、筛选和查询</h5><ul><li>支持在表中搜索</li><li>通过指示符排序列值</li><li>筛选列值</li><li>最大可能比较列值</li></ul><h5 id="单元格突出显示"><a href="#单元格突出显示" class="headerlink" title="单元格突出显示"></a>单元格突出显示</h5><ul><li>闪烁的单元格</li><li>例如更改单元格或您自己的条件</li><li>列/行定制</li><li>NatTable提供了许多预定义的操作，这些操作使用户可以自定义表</li></ul><h5 id="屏幕截图列选择器-列选择器：快速更改顺序和可见性"><a href="#屏幕截图列选择器-列选择器：快速更改顺序和可见性" class="headerlink" title="屏幕截图列选择器 列选择器：快速更改顺序和可见性"></a>屏幕截图列选择器 列选择器：快速更改顺序和可见性</h5><ul><li>调整行和列的大小并自动调整大小（通过鼠标）</li><li>多行/列的大小调整，因此所有选定的行/列的大小都调整为相同的大小</li><li>重新排序和隐藏/显示列（通过鼠标和对话框）</li><li>组/取消组列</li><li>重命名列</li><li>配置列的单元格格式</li><li>NatTable 可以保存所选配置，支持标准动作（复制，粘贴，打印，导出Excel）。</li></ul><p>&emsp;&emsp;本篇博客重点总结在项目中出现的问题，调试分析，总结，有关NatTable的学习这次只是大概介绍一下特点，具体深入学习大家可以参考网址<a href="https://www.eclipse.org/nattable/documentation.php?page=getting_started" target="_blank" rel="noopener">NatTable</a></p><hr><p>&emsp;&emsp;<strong>之前一直在做前端的微信小程序，小游戏，关于RCP富文本客户端的开发就算到现在我写完两个需求还是不太熟悉这个框架，因为框架老师基本都搭建好了，为了低耦合，我们分到的任务都是不太相关的，我负责整个程序的第一步—解码源数据CSV文件实现导入，可选择分隔符，选择区域等功能；另一个需求是写一个项目汇总的hander页面，实现数据的列标题注入，选择，数学分析的方法的选择，进行匹配并输出结果</strong></p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ol><li>Gitee代码托管的一系列问题，其实就是从项目clone到本地，创建分支，提交代码，pull request等一系列团队合作的必要知识的融会贯通<br> &emsp;&emsp;解决方案在遇到这个问题的时候系统的学习了git的项目使用，并输出为博客（本网站，CSDN都可查找）</li><li>解码器的学习<br> &emsp;&emsp;因为我被分到项目的第一步的需求，所以我的速度可能得尽可能最快，于是我在网上搜索，确定需求是csv文件的格式，首先我先了解了对象是csv逗号分隔符文件，然后确定比较使用opencsv解码器，原因是这个网上可以查到的产生问题并解决的最多（意思就是生态挺好的）。。。。然后确定使用的版本，之后去<a href="http://opencsv.sourceforge.net/" target="_blank" rel="noopener">opencsv</a>的官方文档学习了一下方法，并接入此项目,在不需要重写的情况下完成了需求.</li><li>NatTable的学习<br> &emsp;&emsp;采用NatTable表格的数据结构，，，，为了把导入的csv文件存入数据结构中，我又学习了一下NatTable，困难的是NatTable竟然基本没有国内资料，博客，什么的基本都没找到，，，，，于是我只能去学习官网的英文说明文档，下载了实例程序去阅读源码，，，勉勉强强的完成了把数据导入的需求。后面有时间我会出一篇总结NatTable的博客，希望可以帮助有需要的的人（可能国内对比的很少我的水平也有限，望大家斧正）。</li><li>SWT的取值传值等问题<br> &emsp;&emsp;这没有多说的，哪里不会查哪里，图书馆泡泡！</li><li>基本的Java语言的注入问题<br> &emsp;&emsp;在解决从导入文件的数据中选择列标题在SWT下呈现列表选择功能，有个注入问题，这里学习一下：<br>常用的注入有三种：<br> 构造方法的注入，setter注入以及基于注解的注入(这次项目并没有设计注解注入，于是我只是大致的了解一下，并不)。</li></ol><ul><li>构造方法的注入：写Bean时就保证必要的属性，确保bean实例化之后就可以使用，不用写setter，直接构造就可以，也可以在构造文件中配置该类bean，并配置构造器。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span>  String name;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  Setter注入，要求bean提供一个默认的构造函数,并为需要注入的属性提供对应的setter方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>数学分析包的学习<br> &emsp;&emsp;学习Apach Math 3 ，方法与导入数据列标题相同思路可以选择方法进行匹配，就是学习官方文档，会用。</li><li>突发状况<ol><li>打不开Eclipse，当时的背景是代码没有动过，前一天好使，Mac OS X 更新到最新系统版本，报错出现JVM问题，在复制异常后从网上找到解决办法修改Eclipse的配置文件更改JVM的配置.</li><li>打开后运行不了示例程序，当时Eclipse 是Luna for Rcp，无报错，无异常，Run就是无响应，解决办法是更新到最新版本2020.6的Eclipse for Rcp点击运行后就出现报错了，之后根据报错发现原因是系统更新后配置和依赖被清掉了，于是配置好所有的依赖，成功运行！</li></ol></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;StatisticalAnalysis统计分析软件项目阶段性总结&quot;&gt;&lt;a href=&quot;#StatisticalAnalysis统计分析软件项目阶段性总结&quot; class=&quot;headerlink&quot; title=&quot;StatisticalAnalysis统计分析软件项目阶
      
    
    </summary>
    
    
      <category term="基于NatTable的统计软件开发" scheme="http://maskxman.github.io/categories/%E5%9F%BA%E4%BA%8ENatTable%E7%9A%84%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://maskxman.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Gitee 使用教程</title>
    <link href="http://maskxman.github.io/2020/10/06/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://maskxman.github.io/2020/10/06/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-10-05T16:00:00.000Z</published>
    <updated>2020-10-06T11:17:07.245Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<em>由于项目使用代码托管平台为gitee不是github（可能因为科学上网的问题），本文总结了必备基础可用的git知识将那些对于小白的晦涩概念略去，实用的保留，从git的下载开始到使用命令实现代码管理再至gitee平台的学习逐步相伴于大家使用gitee（国内优秀的代码管理平台），如有幸大佬看见错误，望指正（个人博客即将部署评论系统），<a href="https://blog.csdn.net/weixin_45405099" target="_blank" rel="noopener">CSDN博客链接</a>绑定于CSDN的博客。</em></p><h1 id="Gitee使用教程"><a href="#Gitee使用教程" class="headerlink" title="Gitee使用教程"></a>Gitee使用教程</h1><hr><p>&emsp;&emsp;如果想如鱼得水的使用gitee平台那在这之前请君下载Git至您的电脑。在您电脑上的git工具命令将让您心仪的项目fork至您的本地，更可以放心的让您使用IDEA/Pycharm一键绑定上传至您的远程仓库，优秀的代码托管使您更加专注于代码的编辑。</p><h2 id="Git-概述"><a href="#Git-概述" class="headerlink" title="Git 概述"></a>Git 概述</h2><p>&emsp;&emsp; Git 是一种实现代码管理，开放源码的分布式版本控制系统。如今发展成为可以在Windows/macOS/Linux/Unix上运行的跨平台工具。</p><hr><h2 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h2><p>&emsp;&emsp;<em>90%的大学生都使用以下四种操作系统叭！（如果大家使用超出范围的也请各位金主哥哥关注<a href="https://blog.csdn.net/weixin_45405099" target="_blank" rel="noopener">CSDN博客链接</a>评论留言噢，博主逐渐完善！）</em></p><h3 id="Windows平台下载"><a href="#Windows平台下载" class="headerlink" title="Windows平台下载"></a>Windows平台下载</h3><p>&emsp;&emsp;从<a href="http://git-scm.com/download" target="_blank" rel="noopener">Git下载</a>上下载window版的客户端，以管理员身份运行后，一直选择下一步安装即可.</p><h3 id="Mac-OS-X-平台下载"><a href="#Mac-OS-X-平台下载" class="headerlink" title="Mac OS X 平台下载"></a>Mac OS X 平台下载</h3><p>&emsp;&emsp;在终端下执行brew install git (注:请自行解决环境变量以及Brew工具的问题)<strong>But！</strong>这里有：<a href="https://zhuanlan.zhihu.com/p/90508170" target="_blank" rel="noopener">brew安装指南</a></p><h3 id="Ununtu-平台下载"><a href="#Ununtu-平台下载" class="headerlink" title="Ununtu 平台下载"></a>Ununtu 平台下载</h3><p>&emsp;&emsp;在终端下执行 apt-get install git</p><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><p>&emsp;&emsp;在终端下执行 yum install git</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p><strong>&emsp;&emsp;身为预备程序员的大家应该都不陌生：如果你想使用Java那么配置JDK，环境变量是必不可少的吧，git也是如此，但是Git为大家配备了git config工具，专门用来配置或读取相应的环境变量，配置一次，享受一生～</strong></p><h3 id="配置存放的文件"><a href="#配置存放的文件" class="headerlink" title="配置存放的文件"></a>配置存放的文件</h3><ul><li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。</li><li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</li><li>当前仓库的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前仓库有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</li></ul><h3 id="用户信息配置"><a href="#用户信息配置" class="headerlink" title="用户信息配置"></a>用户信息配置</h3><p><strong>个人的用户名称和电子邮件地址，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：可选项global将会让您的信息应用于所有项目，如果您想单独配置去掉global即可～</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"MaskXman"</span></span><br><span class="line">$ git config --<span class="keyword">global</span> user.email MaskXman@example.<span class="keyword">com</span></span><br></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">list</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h2><h3 id="获取项目的git仓库"><a href="#获取项目的git仓库" class="headerlink" title="获取项目的git仓库"></a>获取项目的git仓库</h3><h4 id="1-本地的项目生成git仓库"><a href="#1-本地的项目生成git仓库" class="headerlink" title="1.本地的项目生成git仓库"></a>1.本地的项目生成git仓库</h4><p>&emsp;&emsp;如果你辛辛苦苦的一个人在本地的电脑埋头苦干用代码改变世界（建了一个工程）想要用git管理，那么只需在项目的主目录执行初始化命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令对这些文件进行跟踪，然后提交：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> *.<span class="keyword">c</span></span><br><span class="line">$ git <span class="built_in">add</span> README</span><br><span class="line">$ git commit -<span class="keyword">m</span> <span class="string">'git管理'</span></span><br></pre></td></tr></table></figure><h4 id="2-开源项目fork到本地"><a href="#2-开源项目fork到本地" class="headerlink" title="2.开源项目fork到本地"></a>2.开源项目fork到本地</h4><p>&emsp;&emsp;如果你在某个知名全球的社交平台发现了有趣的项目想要自己拷贝到本地实操一下，那么你将会用到下面的这个代码 git clone [url]：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@gitee.<span class="keyword">com</span>:oschina/git-osc.git</span><br></pre></td></tr></table></figure><p><strong>如果您没有配置SSH，那您将需要配置一手SSH公钥<a href="https://blog.csdn.net/lqlqlq007/article/details/78983879" target="_blank" rel="noopener">SSH配置链接</a>（<em>由于时间有限这些附属操作就暂引他人链接叭，我终将自己写完的！</em>）</strong></p><h3 id="git基础命令"><a href="#git基础命令" class="headerlink" title="git基础命令"></a>git基础命令</h3><p><strong>初始化Git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;gitee&#x2F;test    #进入git文件夹</span><br><span class="line">$ git init               #初始化一个Git仓库</span><br></pre></td></tr></table></figure><p><strong>暂存文件</strong></p><ul><li>⚠️：git add . 将把目录下的所有文件都暂存。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &quot;readme.txt&quot;</span><br></pre></td></tr></table></figure></li></ul><p><strong>查看文件状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br></pre></td></tr></table></figure><p><strong>备注提交相关信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;1.0.0&quot;</span><br></pre></td></tr></table></figure><p><strong>推送到远程仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push https:&#x2F;&#x2F;gitee.com&#x2F;***&#x2F;test.git</span><br></pre></td></tr></table></figure><hr><h2 id="gitee平台"><a href="#gitee平台" class="headerlink" title="gitee平台"></a>gitee平台</h2><p>&emsp;&emsp;gitee平台是一个国内优秀的代码管理平台，更是国内程序人的交流平台，它具有以下特点：</p><ul><li>团队代码管理，提交，托管；</li><li>国内开源项目的宝地，供大家在在自己心仪的项目下跟进，issus；</li><li>自己的开源项目可以让他人看到纠错，更新，改善，领略开源的魅力；</li><li>沉淀自己技术的平台。</li></ul><p><em>本文引用外链，侵权立删</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&lt;em&gt;由于项目使用代码托管平台为gitee不是github（可能因为科学上网的问题），本文总结了必备基础可用的git知识将那些对于小白的晦涩概念略去，实用的保留，从git的下载开始到使用命令实现代码管理再至gitee平台的学习逐步相伴于大家使用gi
      
    
    </summary>
    
    
      <category term="代码管理" scheme="http://maskxman.github.io/categories/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="代码管理" scheme="http://maskxman.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>桌面应用程序项目开发调查</title>
    <link href="http://maskxman.github.io/2020/08/11/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://maskxman.github.io/2020/08/11/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-08-11T11:34:55.284Z</published>
    <updated>2020-09-13T05:52:12.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>&emsp;&emsp;<strong>桌面应用程序</strong>，又称为 GUI 程序（Graphical User Interface），但是和 GUI 程序也有一些区别。桌面应用程序 将 GUI 程序从GUI 具体为“桌面”。桌面应用程序 强调的一个核心概念是“易用”，GUI 程序相对更老的 CUI 程序的优点也是易用，但桌面应用程序 提倡1个更高级别的易用。</p><h2 id="开发方式："><a href="#开发方式：" class="headerlink" title="开发方式："></a>开发方式：</h2><ul><li>原生编译：通过编译-&gt;可执行文件方式，可执行文件直接调用系统API，完成UI绘制等。———高运行效率</li><li>二次编译或解释运行方式：这一类语言是一开始就有本地开发和UI开发的。一次编译后，得到中间文件，通过平台或虚机完成二次加载编译或解释运行。——–较高运行效率</li><li>机箱模式: 需要一个运行外盒，才能够运行。一种是单独开发了基于桌面的机箱，来提供运行平台。另一种就是对机箱打包嵌套，给机箱再加个外壳，让机箱运行在外壳上。</li></ul><p><em>本次项目基本采用原生编译：C++/MFC；托管平台：Java/AWT</em></p><h2 id="C-在桌面应用程序的具体分析："><a href="#C-在桌面应用程序的具体分析：" class="headerlink" title="C++在桌面应用程序的具体分析："></a>C++在桌面应用程序的具体分析：</h2><ol><li>基于C++开发的桌面应用程序需要对目标平台进行单独的编译并生成可执行文件。</li><li>C++基于本身语言的特性需要对内存管理要求较高。</li><li>UI效果与具体的GUI交互支持方式有关。MFC采用贴图方式美化外观，且交互界面运行效率高，在Windows平台中，UI渲染有多种先进的图形库和渲染引擎支持，能够获得极佳的UI性能和效果。</li><li>C++开发的程序跨平台能力较差，需要针对目标平台进行单独编译。当所使用的框架、类库不支持目标平台时，将导致失败的跨平台开发。MFC目前不支持跨平台，仅支持Windows平台。Qt和GTK+对较多平台均支持，包括Windows、Linux、Mac OS X。</li></ol><h2 id="Java在桌面应用程序的具体分析："><a href="#Java在桌面应用程序的具体分析：" class="headerlink" title="Java在桌面应用程序的具体分析："></a>Java在桌面应用程序的具体分析：</h2><ol><li>市面上较为流行的Eclipse等Sun， Oracle公司研发的产品基于Java开发。</li><li>由于Java语言的特性JVM的存在致使基于Java开发的桌面应用程序具有良好的跨平台性。</li><li>运行效率低于C++。</li><li>UI需要第三方支持。</li></ol><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p><strong>此次项目主流基于C++与Java编程语言，C++/MFC学习成本较高，Java学习周期相对较短；C++有良好的UI效果，渲染有多种先进的图形库和渲染引擎支持，但Java的UI效果不尽人意，需要第三方支持；C++需要单独编译所以跨平台性较差，但Java跨平台性较好但是相对于C++运行效率较低。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;桌面应用程序&lt;/strong&gt;，又称为 GUI 程序（Graphical User Inte
      
    
    </summary>
    
    
      <category term="学习记录" scheme="http://maskxman.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习记录" scheme="http://maskxman.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记-02</title>
    <link href="http://maskxman.github.io/2020/07/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <id>http://maskxman.github.io/2020/07/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-08-07T13:53:17.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java学习笔记—-语法"><a href="#Java学习笔记—-语法" class="headerlink" title="Java学习笔记—-语法"></a>Java学习笔记—-语法</h1><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><ul><li><p>定义的位置不同：</p><ul><li>局部变量：方法内部；</li><li>成员变量：类的内部；</li></ul></li><li><p>作用范围不同：</p><ul><li>局部变量：作用域为方法内；</li><li>成员变量：作用域为整个类内；</li></ul></li><li><p>默认值：</p><ul><li>局部变量：无默认值，使用前需赋值；</li><li>成员变量：存在默认值（具体看上文章“Java学习笔记-01”）；</li></ul></li></ul><h2 id="标识符-and-关键字"><a href="#标识符-and-关键字" class="headerlink" title="标识符 and 关键字"></a>标识符 and 关键字</h2><p>&emsp;&emsp;标识符就是一个名字，但在Java中赋予特殊含义用于特定地方的标识符称为关键字</p><h2 id="continue-，break-和-return-的区别"><a href="#continue-，break-和-return-的区别" class="headerlink" title="continue ，break 和 return 的区别"></a>continue ，break 和 return 的区别</h2><ul><li>continue ： 跳出当前循环，执行下一次循环；</li><li>break： 跳出循环体，执行循环体下面的语句；</li><li>return： 1.return：结束方法；<pre><code>2.return value ：返回值；</code></pre></li></ul><h2 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h2><p><strong>当局部变量和成员变量重名时，根据就近原则，优先使用局部变量。</strong><br><strong>如果在重名时仍需访问成员变量，格式：this.成员变量名</strong></p><h2 id="Java-Bean-标准类"><a href="#Java-Bean-标准类" class="headerlink" title="Java Bean 标准类"></a>Java Bean 标准类</h2><p><strong>标准类基本原则</strong></p><ul><li>所有成员变量均设为private；</li><li>为每一个成员变量编写get/set方法；</li><li>分别编写全参/无参方法；</li></ul><h2 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h2><p>在JDK 5 中Java引入了一个新特性——泛型，泛型提供了编译时类型安全监测机制，可以检测出非法的类型。泛型本质操作的数据类型是参数化类型。<em>Java在编译期间所有的泛型信息都会被擦除—伪泛型</em></p><h2 id="API（Application-Programming-Interface）-应用程序编程接口"><a href="#API（Application-Programming-Interface）-应用程序编程接口" class="headerlink" title="API（Application Programming Interface） 应用程序编程接口"></a>API（Application Programming Interface） 应用程序编程接口</h2><p>&emsp;&emsp;JDK里提供的成千上万的类和方法，是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件的以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><h2 id="ArrayList-对象数组"><a href="#ArrayList-对象数组" class="headerlink" title="ArrayList 对象数组"></a>ArrayList 对象数组</h2><p>&emsp;&emsp;ArrayList 的长度可以随意改变，与数组不同，&lt; E &gt;代表泛型（只能是引用类型，不能是基本类型）</p><ul><li><strong>对于ArrayList直接打印将输出内容，而不是地址值。</strong></li><li><strong>在ArrayList中存储基本类型，使用基本类型对应的包装类</strong>,byte-&gt;Byte,short-&gt;Short,int-&gt;Integer,long-&gt;Long,float-&gt;Float,double-&gt;Double,char-&gt;Character,boolean-&gt;Boolean;</li></ul><p><em>从JDK1.5+开始支持自动装箱（基本类型-&gt;包装类型）和自动拆箱（包装类型-&gt;基本类型）</em></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><em>Java.lang.String类代表字符串，程序当中所有的双引号字符串，都是String类的对象，就算没有new，也照样是。</em></p><ul><li>字符串的内容不可变</li><li>可以共享使用—节省内存</li><li>字符串效果上相当于char[] 字符数组，但底层原理是byte[]是字节数组</li></ul><p>三种构造方法：</p><p>1.public String():创建一个空白字符串，不含任何内容。<br>2.public String(char[] array)<br>3.public String(byte[] array)<br>4.<strong>直接创建不用new也是字符串对象</strong></p><p><strong>字符串常量池（在堆中）：程序当中直接双引号字符串就在池中（new出的字符串不在字符串常量池）。对于引用类型，==进行的是地址值的比较。</strong></p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p><strong>public boolean equals(Object obj) 参数可以是任意对象，只有参数是一个字符串并且内容相同才会返回true，否则返回false</strong><br><strong>注意：equals具有对称性a.equals(b)与b.equals(a)结果相同，但是当比较双方一个为常量一个为变量时，建议常量在前，变量在后，因为如果变量的赋值为空，在调用equals时会报NullPointerExpection空指针异常错误。</strong></p><h3 id="字符串获取"><a href="#字符串获取" class="headerlink" title="字符串获取"></a>字符串获取</h3><ul><li>public int length():获取字符串长度；</li><li>public String concat（String str）：拼接字符串，返回拼接后值；</li><li>public char charAt（int index）：获取索引位置的字符串；</li><li>public int indexOf（String str）：查找参数首次在字符串出现的位置；</li></ul><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><ul><li>public String substring（int index）：截取参数开始到字符串末尾的值；</li><li>public String substring（int begin， int end）：参数左开又闭范围内字符串；</li></ul><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><ul><li>public char[] toCharArray():将当前字符串拆分为字符数组；</li><li>public byte[] getBytes():获得底层字节数组；</li><li>public String replace(CharSequence old, CharSequence new):将旧字符串替换为新的字符串并返回；</li></ul><h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h3><ul><li>public String[] split(String regex)：按照参数的规则分割字符串(<strong>注意：split为正则表达式，”\.”为“.”的分隔符</strong>)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java学习笔记—-语法&quot;&gt;&lt;a href=&quot;#Java学习笔记—-语法&quot; class=&quot;headerlink&quot; title=&quot;Java学习笔记—-语法&quot;&gt;&lt;/a&gt;Java学习笔记—-语法&lt;/h1&gt;&lt;h2 id=&quot;成员变量和局部变量&quot;&gt;&lt;a href=&quot;#成员变量
      
    
    </summary>
    
    
      <category term="后端" scheme="http://maskxman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://maskxman.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记-01</title>
    <link href="http://maskxman.github.io/2020/07/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>http://maskxman.github.io/2020/07/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</id>
    <published>2020-07-25T16:00:00.000Z</published>
    <updated>2020-07-27T12:31:05.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-学习笔记-01"><a href="#Java-学习笔记-01" class="headerlink" title="Java 学习笔记 - 01"></a>Java 学习笔记 - 01</h1><h2 id="Java-定义："><a href="#Java-定义：" class="headerlink" title="Java 定义："></a>Java 定义：</h2><p>Java是一种广泛使用的计算机编程语言，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。由于商标搜索显示Oak已被一家显卡制造商注册。于是同年，Oak被改名为Java。当使用十六进制编辑器打开由Java源代码编译出的二进制文件（.class文件）的话，最前面的32位将显示为CA FE BA BE，即词组“CAFE BABE”（咖啡屋宝贝）</p><h2 id="Java-开发目的："><a href="#Java-开发目的：" class="headerlink" title="Java 开发目的："></a>Java 开发目的：</h2><p>Java之所以被开发，是要达到以下五个目的：</p><ul><li><p>应当使用面向对象程序设计方法学</p></li><li><p>应当允许同一程序在不同的计算机平台执行</p></li><li><p>应当包括内建的对计算机网络的支持</p></li><li><p>应当被设计成安全地执行远端代码</p></li><li><p>应当易于使用，并借鉴以前那些面向对象语言（如C++）的长处。<br>Java技术主要分成几个部分：Java语言、Java运行环境、类库。一般情况下说Java时并不区分指的是哪个部分。</p><h2 id="Java语言特点："><a href="#Java语言特点：" class="headerlink" title="Java语言特点："></a>Java语言特点：</h2></li><li><p>面向对象oop思想：封装，多态，继承；</p></li><li><p>跨平台：JVM的存在实现跨平台；</p></li><li><p>多线程：无需调用操作系统的多线程功能就可以进行程序设计，类比C++；</p></li><li><p>编译与解释共存:Java程序需要先通过编译生成.class文件，然后通过解释器来执行。</p></li></ul><h2 id="关于JVM，JRE，JDK-环境变量-的理解"><a href="#关于JVM，JRE，JDK-环境变量-的理解" class="headerlink" title="关于JVM，JRE，JDK, 环境变量 的理解"></a>关于JVM，JRE，JDK, 环境变量 的理解</h2><h3 id="JVM-解释"><a href="#JVM-解释" class="headerlink" title="JVM 解释"></a>JVM 解释</h3><p><strong>字节码</strong>： 在Java中，虚拟机识别的代码叫做字节码，通俗来讲就是 <em>.class</em>文件。类比Python和C一种是解释型，一种是编译型，但是Java存在虚拟机识别的字节码降低了解释型语言的效率慢的问题，但保持了解释型语言的可移植性特点，而且由于虚拟机的存在使得Java程序无须重新编译便可在多种不同的系统上运行。</p><p><strong>虚拟机</strong>： JVM就是运行字节码的虚拟机，为了在不同的系统上运行相同的字节码（.class）出现相同的结果（机器码）—-跨平台。</p><h3 id="JRE-解释"><a href="#JRE-解释" class="headerlink" title="JRE 解释"></a>JRE 解释</h3><p>&emsp;&emsp;JRE是java运行环境，其中包括：JVM，Java类库，Java命令和一些基础构件，但是不能编程；</p><h3 id="JDK-解释"><a href="#JDK-解释" class="headerlink" title="JDK 解释"></a>JDK 解释</h3><p>&emsp;&emsp;JDK是功能完备的Java SDK，包含了JRE，javac和jdb等，可编程；</p><h3 id="环境变量-解释"><a href="#环境变量-解释" class="headerlink" title="环境变量 解释"></a>环境变量 解释</h3><p>&emsp;&emsp;让JDK可以在任意目录下运行，将该工具告诉系统，当使用该工具时，由系统帮我们去找指定目录；</p><h2 id="关于Oracle-JDK和Open-JDK的理解"><a href="#关于Oracle-JDK和Open-JDK的理解" class="headerlink" title="关于Oracle JDK和Open JDK的理解"></a>关于Oracle JDK和Open JDK的理解</h2><ul><li>Open JDK 完全开源，而Oracle JDK并不。</li><li>Oracle JDK在虚拟机性能方面更出色，并且更稳定，但不会提供长期版本的支持，所以保持了用户的持续更新。</li><li>Oracle JDK根据二进制代码协议获得许可，而Open JDK则是GPL v2许可。</li></ul><h2 id="Java-内存"><a href="#Java-内存" class="headerlink" title="Java 内存"></a>Java 内存</h2><p><strong>1.栈：存放方法中的局部变量，方法的运行一定要在栈中</strong><br><strong>2.堆：对象存放的地方（new 出来的）</strong> 堆内存的默认值：整数： 0，浮点数：0.0；字符：“\u0000” ; 布尔： false； 引用类型： null；<br><strong>3.方法区： 存储.class相关信息，包含方法信息</strong><br><strong>4.本地方法栈：与操作系统相关</strong><br><strong>5.寄存器：与CPU相关</strong></p><hr><p>参考文章：</p><ul><li><em><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86md#11-java-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86" target="_blank" rel="noopener">JavaGuide/Java基础</a></em></li><li><em><a href="https://zh.wikipedia.org/zh-hans/Java" target="_blank" rel="noopener">维基百科</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-学习笔记-01&quot;&gt;&lt;a href=&quot;#Java-学习笔记-01&quot; class=&quot;headerlink&quot; title=&quot;Java 学习笔记 - 01&quot;&gt;&lt;/a&gt;Java 学习笔记 - 01&lt;/h1&gt;&lt;h2 id=&quot;Java-定义：&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
    
      <category term="后端" scheme="http://maskxman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://maskxman.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="http://maskxman.github.io/2020/07/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://maskxman.github.io/2020/07/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-04-12T11:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>&emsp;&emsp;要学会写博客，首先要明白写博客得利器：<strong>Markdown</strong>，本文将Markdown的基本语法教给大家！<a id="more"></a></p><hr><h2 id="Markdown定义"><a href="#Markdown定义" class="headerlink" title="Markdown定义"></a>Markdown定义</h2><p> &emsp;&emsp; Markdown 的开发者是John Gruber 初始版本是2004年3曰19日，最新版本1.0.1。格式类型是标记语言，之后延伸有MultiMarkdown,Markdown Extra, CommonMark.  Markdown是一种<strong>轻量级标记语言</strong> ，允许人们使用易读易写的纯文本格式编写文档，然后转换为有效的XHTML。  </p><p>  &emsp; &emsp;由于Markdown 的轻量化，易读易写的特性，并且对于图片，图标，数学式都有支持，当前许多网站都广泛使用。</p><hr><h2 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h2><hr><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><hr><p><strong>Markdown里标题支持6种级别，添加””#_”(空格)后面加上文字</strong></p><p>&emsp;&emsp; 代码展示：<br>    <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown1.jpg" alt="Markdown标题"></p><hr><h4 id="2-段落"><a href="#2-段落" class="headerlink" title="2.段落"></a>2.段落</h4><hr><p><strong><em>Markdown段落表示直接在欲分段处添加空行（回车）即可</em></strong><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown2.jpg" alt="Markdown段落"></p><hr><h4 id="3-字体，分线"><a href="#3-字体，分线" class="headerlink" title="3.字体，分线"></a>3.字体，分线</h4><hr><p><strong><em>在Markdown关于字体支持：粗体，粗斜体，斜体， 删除线，分割线，</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">***粗斜体**</span>*</span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line">~~删除文字~~</span><br><span class="line"><span class="strong">*****</span>**</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown3.jpg" alt="Markdown字体"></p><hr><h4 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h4><hr><p><strong><em>Markdown支持列表：有序列表，无序列表， 列表嵌套</em></strong></p><p><em>注意： 1. 无序列表 ：采用“ *_，+_， -_”(符号后面有空格)  2.有序列表直接在数字后面加点加空格  3.列表嵌套在上下两层列表之间<br>加4个空格即可。</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>无序列表1</span><br><span class="line"><span class="bullet">* </span>无序列表2</span><br><span class="line"><span class="bullet">* </span>无序列表3</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>无序列表1</span><br><span class="line"><span class="bullet">+ </span>无序列表2</span><br><span class="line"><span class="bullet">+ </span>无序列表3</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>无序列表1</span><br><span class="line"><span class="bullet">- </span>无序列表2</span><br><span class="line"><span class="bullet">- </span>无序列表3 </span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>有序列表1</span><br><span class="line"><span class="bullet">2. </span>有序列表2</span><br><span class="line"><span class="bullet">3. </span>有序列表3</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>列表嵌套（第一层）1：</span><br><span class="line"><span class="bullet">    * </span>第二层1</span><br><span class="line"><span class="bullet">    * </span>第二层2</span><br><span class="line"><span class="bullet">2. </span>列表嵌套（第一层）2</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown4.jpg" alt="Markdown列表"></p><hr><h4 id="5-区块（引用）"><a href="#5-区块（引用）" class="headerlink" title="5.区块（引用）"></a>5.区块（引用）</h4><hr><p><strong><em>在段落前使用‘&gt;_（空格）’也支持嵌套</em></strong><br>*注意在引用种段落使用&gt;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; 引用嵌套</span><br><span class="line">&gt;&gt;&gt; 引用嵌套3</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;引用嵌套</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown5.jpg" alt="Markdown引用"></p><hr><hr><h2 id="Markdown进阶"><a href="#Markdown进阶" class="headerlink" title="Markdown进阶"></a>Markdown进阶</h2><hr><h4 id="1-插入代码块"><a href="#1-插入代码块" class="headerlink" title="1.插入代码块"></a>1.插入代码块</h4><p><strong><em>使用三个点（英文状态下tab键上面的按键）对代码进行上下包裹</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a,b=0;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; endl;</span><br></pre></td></tr></table></figure><hr><h4 id="2-插入图片"><a href="#2-插入图片" class="headerlink" title="2.插入图片"></a>2.插入图片</h4><p><strong><em>！【图片描述】（图片地址）</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Markdown图片</span>](<span class="link">https://cdn.jsdelivr.net/gh/MaskXman/source@2.0/touxiang.jpg</span>)</span><br></pre></td></tr></table></figure><h4 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h4><p><strong><em>支持对齐</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@3.1/Markdown6.jpg" alt="Markdown表格"></p><hr><h4 id="4-转义字符"><a href="#4-转义字符" class="headerlink" title="4.转义字符"></a>4.转义字符</h4><p><strong><em>直接在符号前加反斜杠</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><hr><p><em>本篇文章参考了维基百科，百度文库，等知名网站，如有侵权请评论联系立删！</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;要学会写博客，首先要明白写博客得利器：&lt;strong&gt;Markdown&lt;/strong&gt;，本文将Markdown的基本语法教给大家！
    
    </summary>
    
    
      <category term="编程语言" scheme="http://maskxman.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://maskxman.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>研究哲学家进餐所引发的细节问题</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-04-12T10:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么数组开头是0而不是1呢？"><a href="#为什么数组开头是0而不是1呢？" class="headerlink" title="为什么数组开头是0而不是1呢？"></a>为什么数组开头是0而不是1呢？</h1><a id="more"></a><p>&emsp;&emsp; <em>最近在学操作系统里有关进程的并发和互斥已经同步问题，在研究经典同步问题“哲学家进餐”时，刚准备写思路就遇到一个我学了3个月计算机专业竟然现在才想解决的问题（说来惭愧，，现在大二下，大二上刚转专业到软件工程），为什么数组下标要从0开始（经本人实践，碰上这种不知道谁开头的真的0开头超级好使啊啊啊啊）</em></p><hr><h2 id="第一种解释："><a href="#第一种解释：" class="headerlink" title="第一种解释："></a>第一种解释：</h2><p>&emsp;&emsp;在编程语言的历史中C-&gt;Java-&gt;JavaScript的顺序出现的，C的数组下标从0开始。所以后面都是从0开始，降低学习成本。。。。。。<br>（ps：显然这个回答完美的解决了我的问题！！！！）</p><hr><h2 id="第二种解释："><a href="#第二种解释：" class="headerlink" title="第二种解释："></a>第二种解释：</h2><p>在C语言中，下标的含义是：<strong>当前元素到第一元素的偏移量</strong>。</p><ul><li>第一个元素的下标自然是0；</li><li>第二个元素的下标自然是1；</li><li>第n个元素的下标为n-1；</li></ul><p><strong>我们知道数组是存储在连续的内存空间中（不知道的复习这迷人的基础！）</strong><br>c语言的编译器通过第一个元素的地址（数组地址），和对应元素的下标（上面所说的偏移量）就可以得到他的地址。（寻址）<br><strong>数组寻址：arr[i] = first_address + i * tpye_size(1)</strong>(ps：不懂这个公式的去恶补这迷人的数据结构！！)</p><p>可如果下标从1开始：寻址就变成了“arr[i] = first_address + (i-1) * type_sizr(1)<br>比较发现每次寻址cpu多执行了一条i-1的指令，但是对于数组这样的基础数据结构，无论哪种高级语言中，都是频繁间接或直接被使用的，因此要尽量减少消耗cpu的资源。</p><hr><h2 id="请问以上两种和哲学家有什么关系啊！"><a href="#请问以上两种和哲学家有什么关系啊！" class="headerlink" title="请问以上两种和哲学家有什么关系啊！"></a>请问以上两种和哲学家有什么关系啊！</h2><p><em>下面这种是来自同班大佬告诉:（ps：我果然是衬托大佬的绿叶。。。。哭唧唧.jpg）</em></p><p>&emsp;&emsp;在哲学家问题中，一张圆桌上面有5个哲学家如果把任意一个标号从0开始，然后按顺序一次排序到4，当走完一圈时想要在计数就要进行<strong>模运算</strong>（不知道的小伙伴今天看书到4点！后天的4点！）<br>这时候加1除模你就会惊奇的发现她就成了第一个数的下标“0”</p><p>（4+ 1）/ 5 = 0；</p><p>于是这样就完美的解决了小白问题！默默感谢大佬！</p><p>ps: 咳咳，好了解决完这个数组问题我终于可以愉快的画一个一桌子哲学家吃饭的图了！开心.jpg</p><p><em>以上内容参考各大百度谷歌博客总结，侵权联系立删</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么数组开头是0而不是1呢？&quot;&gt;&lt;a href=&quot;#为什么数组开头是0而不是1呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么数组开头是0而不是1呢？&quot;&gt;&lt;/a&gt;为什么数组开头是0而不是1呢？&lt;/h1&gt;
    
    </summary>
    
    
      <category term="学习记录" scheme="http://maskxman.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习记录" scheme="http://maskxman.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序学习笔记（一）</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-05-21T15:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;时隔2个月终于要总结一下这断断续续的微信小程序基础开发笔记了，再不总结，我可能连github怎么用都不知道了 。。。。</p><h1 id="干货来袭"><a href="#干货来袭" class="headerlink" title="干货来袭"></a>干货来袭</h1><a id="more"></a><hr><h2 id="基础前言"><a href="#基础前言" class="headerlink" title="基础前言"></a>基础前言</h2><p>&emsp;&emsp;微信⼩程序，简称⼩程序，英⽂名 Mini Program ，是⼀种不需要下载安装即可使⽤的应⽤，它实现<br>了应⽤“触⼿可及”的梦想，⽤⼾扫⼀扫或搜⼀下即可打开应⽤，学习微信小程序的开发前后端分离的模式也一样是有的，微信小程序完整的开发不仅你需要掌握前端三件套（Html，Css，JavaScript）数据库和服务器等后端编程基础也一定得具备（如果你励志成为全栈工程狮）本文重点介绍基于电商平台的微信小程序前端开发基础接口实现，对于如何注册微信公众号小程序appid之类的本文不再赘述，全程讲编程干货！<strong>高能来袭，内容具多！</strong></p><h2 id="1-1选择微信小程序的理由"><a href="#1-1选择微信小程序的理由" class="headerlink" title="1.1选择微信小程序的理由"></a>1.1选择微信小程序的理由</h2><ul><li>微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾。</li><li>推⼴app 或公众号的成本太⾼。</li><li>开发适配成本低。</li><li>跨平台。</li></ul><h2 id="2-1小程序结构目录"><a href="#2-1小程序结构目录" class="headerlink" title="2.1小程序结构目录"></a>2.1小程序结构目录</h2><p>⼩程序框架提供了⾃⼰的视图层描述语⾔ WXML 和 WXSS ，以及 JavaScript ，并在视图层与逻 辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p><table><tr><td>结构</td><td>传统web</td><td>微信小程序</td></tr><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>逻辑</td><td>JS</td><td>JS</td></tr><tr><td>配置</td><td>NONE</td><td>JSON</td></tr></table><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@5.1/wechat1.jpg" alt="微信小程序图片"></p><p>ps：这次用Markdown的表格语法静态页面识别不了不知为啥，改用的html，然后下面再用Markdown语法跳转cdn的jsdeliver链接必须得敲两次回车。。。。编程小坑被get！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;时隔2个月终于要总结一下这断断续续的微信小程序基础开发笔记了，再不总结，我可能连github怎么用都不知道了 。。。。&lt;/p&gt;
&lt;h1 id=&quot;干货来袭&quot;&gt;&lt;a href=&quot;#干货来袭&quot; class=&quot;headerlink&quot; title=&quot;干货来袭&quot;&gt;&lt;/a&gt;干货来袭&lt;/h1&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://maskxman.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="http://maskxman.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序学习笔记（三）</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-05-23T13:36:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h2><p><strong>WXML是框架设计的标签语言类似HTML，结合组件，系统，构建出页面的结构</strong></p><a id="more"></a><h3 id="4-1-1数据的绑定"><a href="#4-1-1数据的绑定" class="headerlink" title="4.1.1数据的绑定"></a>4.1.1数据的绑定</h3><h4 id="Normal写法"><a href="#Normal写法" class="headerlink" title="Normal写法"></a>Normal写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">            massage:&#39;Hello World!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件属性"><a href="#组件属性" class="headerlink" title="组件属性"></a>组件属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view id&#x3D;&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        id:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;checkbox checked&#x3D;&quot;&#123;&#123;true&#125;&#125;&quot;&gt;&lt;&#x2F;checkbox&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-2运算"><a href="#4-1-2运算" class="headerlink" title="4.1.2运算"></a>4.1.2运算</h3><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden&#x3D;&quot;&#123;&#123;flag ? true:false&#125;&#125;&gt;Hidden&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h4 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; a + b &#125;&#125; + &#123;&#123;c&#125;&#125; + d &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        a:1,</span><br><span class="line">        b:2,</span><br><span class="line">        c:3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;&quot;hello&quot;+ words&#125;&#125;&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        words: &#39;World&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-1-3条件渲染"><a href="#4-1-3条件渲染" class="headerlink" title="4.1.3条件渲染"></a>4.1.3条件渲染</h3><ul><li>wx:if<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;view wx:if&#x3D;&quot;&#123;&#123;false&#125;&#125;&quot;&gt;1&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view wx:elif&#x3D;&quot;&#123;&#123;true&#125;&#125;&quot;&gt;2&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view wx:else&gt;3&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure></li><li>hidden<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden&#x3D;&quot;&#123;&#123;condition&#125;&#125;&quot;&gt; True &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h3 id="4-1-4列表渲染"><a href="#4-1-4列表渲染" class="headerlink" title="4.1.4列表渲染"></a>4.1.4列表渲染</h3></li><li>wx:for</li><li>项的变量名默认为 item wx:for–item 可以指定数组当前元素的变量名 </li><li>下标变量名默认为 index wx:for–index 可以指定数组当前下标的变量名</li></ul><p><strong>string 类型，表⽰ 循环项中的唯⼀属性 如</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list:[&#123;id:0,name:&quot;学习&quot;&#125;,&#123;id:1,name:&quot;编程&quot;&#125;]</span><br><span class="line">wx:key&#x3D;&quot;id&quot;</span><br></pre></td></tr></table></figure><p><strong>保留字 <em>this ，它的意思是 item 本⾝ ，</em>this 代表的必须是 唯⼀的字符串和数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list:[1,2,3,4,5]</span><br><span class="line">wx:key&#x3D;&quot;*this&quot;</span><br></pre></td></tr></table></figure><ul><li>wx:key ⽤来提⾼数组渲染的性能</li><li>wx:key 绑定的值 有如下选择<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for&#x3D;&quot;&#123;&#123;array&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;</span><br><span class="line"> &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;</span><br><span class="line">      id:0,</span><br><span class="line">      message: &#39;foo&#39;,</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">      id:1,</span><br><span class="line">      message: &#39;bar&#39;</span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>block渲染⼀个包含多节点的结构块 block最终不会变成真正的dom元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:for&#x3D;&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot; wx:key&#x3D;&quot;*this&quot; &gt;</span><br><span class="line">  &lt;view&gt; &#123;&#123;index&#125;&#125;: &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt; &#123;&#123;item&#125;&#125; &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;block&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;4-1-语法&quot;&gt;&lt;a href=&quot;#4-1-语法&quot; class=&quot;headerlink&quot; title=&quot;4.1 语法&quot;&gt;&lt;/a&gt;4.1 语法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;WXML是框架设计的标签语言类似HTML，结合组件，系统，构建出页面的结构&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://maskxman.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="http://maskxman.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序学习笔记（二）</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-05-22T15:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-小程序的配置"><a href="#3-1-小程序的配置" class="headerlink" title="3.1 小程序的配置"></a>3.1 小程序的配置</h2><p><strong>⼀个⼩程序会包括最基本的两种配置⽂件。⼀种是全局的 app.json（控制整体） 和 ⻚⾯的page.json（控制单独页面的）</strong></p><a id="more"></a><p><em>注意：在app.json与page.json里不可以写注释代码</em></p><h3 id="全局配置-app-json"><a href="#全局配置-app-json" class="headerlink" title="全局配置 app.json"></a>全局配置 app.json</h3><p><strong>全局配置会涵盖页面路径，前端显示，网络超时，小程序的底部tabbar</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"pages"</span>:[</span><br><span class="line">        <span class="string">"pages/index/index"</span>,</span><br><span class="line">        <span class="string">"pages/mine/index"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"window"</span>:&#123;</span><br><span class="line">        <span class="string">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">        <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">        <span class="string">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">        <span class="string">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="string">"list"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"image/home.png"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"image/home-hl.png"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"pagePath"</span>: <span class="string">"pages/category/category"</span>,</span><br><span class="line">        <span class="string">"text"</span>: <span class="string">"分类"</span>,</span><br><span class="line">        <span class="string">"iconPath"</span>: <span class="string">"image/category.png"</span>,</span><br><span class="line">        <span class="string">"selectedIconPath"</span>: <span class="string">"image/category-hl.png"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"pagePath"</span>: <span class="string">"pages/shoppingcar/shoppingcar"</span>,</span><br><span class="line">        <span class="string">"text"</span>: <span class="string">"购物车"</span>,</span><br><span class="line">        <span class="string">"iconPath"</span>: <span class="string">"image/cart.png"</span>,</span><br><span class="line">        <span class="string">"selectedIconPath"</span>: <span class="string">"image/cart-hl.png"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"pagePath"</span>: <span class="string">"pages/mine/mine"</span>,</span><br><span class="line">        <span class="string">"text"</span>: <span class="string">"我的"</span>,</span><br><span class="line">        <span class="string">"iconPath"</span>: <span class="string">"image/me.png"</span>,</span><br><span class="line">        <span class="string">"selectedIconPath"</span>: <span class="string">"image/me-hl.png"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@5.2/wechat2.jpg" alt="微信小程序图片"><br>代码解释：</p><ul><li>pages：描述⼩程序所有⻚⾯路径。 </li><li>window: 定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。 </li><li>tabbar： 底部导航栏。</li><li>完整的配置信息请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">微信小程序官方文档 </a></li></ul><h3 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h3><p><strong>每一个小程序页面也可以使用 .json 文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖 app.json 的 window 中相同的配置项。文件内容为一个 JSON 对象</strong></p><p>配置示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;light&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>更多配置项属性参考<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">官方文档</a></em> </p><h3 id="其他sitemap"><a href="#其他sitemap" class="headerlink" title="其他sitemap"></a>其他sitemap</h3><p><strong>sitemap.json ⽂件⽤于配置⼩程序及其⻚⾯是否允许被微信索引。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3-1-小程序的配置&quot;&gt;&lt;a href=&quot;#3-1-小程序的配置&quot; class=&quot;headerlink&quot; title=&quot;3.1 小程序的配置&quot;&gt;&lt;/a&gt;3.1 小程序的配置&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;⼀个⼩程序会包括最基本的两种配置⽂件。⼀种是全局的 app.json（控制整体） 和 ⻚⾯的page.json（控制单独页面的）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://maskxman.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="http://maskxman.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序学习笔记（四）</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-06-20T09:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-1小程序的绑定"><a href="#5-1小程序的绑定" class="headerlink" title="5.1小程序的绑定"></a>5.1小程序的绑定</h2><p><strong>⼩程序中绑定事件，通过bind关键字来实现。如 bindtap bindinput bindchange 等 不同的组件⽀持不同的事件，具体看组件的说明即可。</strong></p><a id="more"></a><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input bindinput&#x3D;&quot;handleInput&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  &#x2F;&#x2F; 绑定的事件</span><br><span class="line">  handleInput: function(e) &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">    console.log(&quot;值被改变了&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong></p><ul><li>绑定事件时不能带参数 不能带括号</li><li>事件传值 通过标签⾃定义属性的⽅式 和 value</li><li>事件触发时获取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> handleInput: function(e) &#123;</span><br><span class="line">   &#x2F;&#x2F; &#123;item:100&#125;</span><br><span class="line">  console.log(e.currentTarget.dataset)</span><br><span class="line">     </span><br><span class="line">   &#x2F;&#x2F; 输入框的值</span><br><span class="line">  console.log(e.detail.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;5-1小程序的绑定&quot;&gt;&lt;a href=&quot;#5-1小程序的绑定&quot; class=&quot;headerlink&quot; title=&quot;5.1小程序的绑定&quot;&gt;&lt;/a&gt;5.1小程序的绑定&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;⼩程序中绑定事件，通过bind关键字来实现。如 bindtap bindinput bindchange 等 不同的组件⽀持不同的事件，具体看组件的说明即可。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://maskxman.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="http://maskxman.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序踩坑总结</title>
    <link href="http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>http://maskxman.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-07-13T06:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-云函数返回值result"><a href="#1-云函数返回值result" class="headerlink" title="1.云函数返回值result"></a>1.云函数返回值result</h2><ul><li>看了好多教学视频，为啥敲得和教程一样result返回值竟然是<a id="more"></a>null呢！！！<br>Li同学查了很多博客，找到了这个官方没重点说明得坑：</li></ul><hr><p> <strong>解决办法</strong><br>1.看云函数得环境node.js版本是哪个版本，不同版本对于返回有不同规则。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@6.0/wxzongjie.jpg" alt="微信小程序总结"><br>2.根据对应版本（现在基本都10.15）写代码（函数前加async）<br>3.Li同学啊！我根据你说的改了不行啊，null没完了啊，。。。。停！小哥哥你先去看看你改完部署没，部署完刷新没！（我在这里摔的把膝盖摔碎了。。）</p><h2 id="2-switch显示错误"><a href="#2-switch显示错误" class="headerlink" title="2.switch显示错误"></a>2.switch显示错误</h2><ul><li>很多和我一样的小白从B站看了好多微信小程序教程，为啥自己调试的时候bug那么多呢，这里重点批评某教学视频项目实战的时候用switch组件错误示范。在setData时，用的是云端的数据，并没有修改本地的数据导致只有云端boolen值改变，但是本地没有，这样造成的结果是只有重新编译才会使switch组件显示正确。</li></ul><p><strong>解决办法</strong></p><ul><li>在setData使不要把值写成云端的app.xxxxxxx,应该写成setStorage（’key’,value）的形式，这样就不用重新编译，本地就会改过来了，当然js文件里switchChange里面还要正常的改云端数据的。。。。</li><li>(过了一天。。)当我修改头像的时候也出现了和开关相同的问题，，，，我发现可能还有另一种问题，就是在我改变这几个字段的时候成功后没promise全局的的字段修改，大家then（res=&gt;{全局修改字段就ok！});这里我道歉可能不是那个教学视频错误使用函数，而是没意识到最后修改全局字段，教学视频还是视频，，得自己亲自调试才会寻找出很多bug在修改。</li></ul><h2 id="3-ES6问题"><a href="#3-ES6问题" class="headerlink" title="3.ES6问题"></a>3.ES6问题</h2><ul><li>大家都习惯于从官方文档看开发文档，他会给出具体的代码样板，但是其中有一个关于调用成功后返回值的问题，如果大家直接copy官方文档的范例代码，他就会报错，比如<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@6.1/wxzongjie2.jpg" alt="微信小程序总结"><br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@6.1/wxzongjie3.jpg" alt="微信小程序总结"></li></ul><p><strong>解决办法</strong><br>这时候大家最好改成：<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/MaskXman/source@6.1/wxzongjie4.jpg" alt="微信小程序总结"><br>这样子他就不会报错了！！！！</p><p><strong>只是想坚持总结，培养一个习惯！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-云函数返回值result&quot;&gt;&lt;a href=&quot;#1-云函数返回值result&quot; class=&quot;headerlink&quot; title=&quot;1.云函数返回值result&quot;&gt;&lt;/a&gt;1.云函数返回值result&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;看了好多教学视频，为啥敲得和教程一样result返回值竟然是
    
    </summary>
    
    
      <category term="前端" scheme="http://maskxman.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="http://maskxman.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之单链表</title>
    <link href="http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-04-16T02:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><a id="more"></a><p>&emsp;&emsp;自己动手写了一遍单链表，对指针的运用更加深刻了，其中也有很多小问题，开始一直是闭门造车，调试很多问题，代码写的也很啰嗦，这里其实关键是理解单链表的算法，和顺序表很大不同，对于存储结构，查询方法等。<br>其次是对于编辑器的痛彻领悟，我一般都是sublime，之后换成了VS studio，发现这大工程太麻烦了，又改成了VScode，之后到了Dev，再到最后sublime+DEV仅仅是为了追求编程的体验。。。。。配置这些IDE学到了很多。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>这次写的代码参考了很多博客，b站，CDSN其中真的感觉代码简洁的舒服，读的很舒服，为了便于理解，代码写了很多繁杂的输出，交互，如果大家觉得没必要直接删主函数里的就可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">list_head_insert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">LNode* s;</span><br><span class="line">ElemType x;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">2020</span>) &#123;</span><br><span class="line">s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">list_tail_insert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">LNode* s, * r = L;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">2020</span>) &#123;</span><br><span class="line">s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">LNode* p = L-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; count &lt; i) &#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">LNode* p = L-&gt;next;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListFronInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">LNode* p = GetElem(L,i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data= e;</span><br><span class="line">s-&gt;next= p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteLNode</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">LNode* p = GetElem(L,i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* q;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">LNode *p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line">count++;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">LNode *p=L,*q=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p=q;</span><br><span class="line">q=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (L!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>, L-&gt;data);</span><br><span class="line">L = L-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkList L;</span><br><span class="line"><span class="keyword">int</span> searchI,InsertI,DeleteI;</span><br><span class="line">ElemType searchE,InsertE,DeleteE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入链表数值并以2020结尾:"</span>);</span><br><span class="line"><span class="comment">//list_head_insert(L);</span></span><br><span class="line">list_tail_insert(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"此链表为："</span>);</span><br><span class="line">PrintList(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入查询数值所在链表的序号："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;searchI);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"链表第 %d 位的数值是 %d \n"</span>, searchI, GetElem(L, searchI)-&gt;data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入查询数值："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;searchE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"链表值为 %d 的序号是 %d \n"</span>, searchE, LocateElem(L, searchE));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入插入位置和插入数值:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;InsertI,&amp;InsertE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"在位置 %d 插入 %d \n"</span>,InsertI,InsertE,ListFronInsert(L,InsertI,InsertE));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入后的链表为："</span>); </span><br><span class="line">PrintList(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入删除结点的序号： "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;DeleteI);</span><br><span class="line">DeleteLNode(L,DeleteI);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除后的链表为："</span>);</span><br><span class="line">PrintList(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"链表长度为：%d"</span>,Length(L));</span><br><span class="line">DestroyList(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"链表已自动删除"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之顺序栈</title>
    <link href="http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%A0%88/"/>
    <id>http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E6%A0%88/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-04-23T11:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><a id="more"></a><p>&emsp;&emsp;<strong>栈是一种受限的线性表，采用顺序存储的栈称为顺序栈，他利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，<br>同时附设一个指针（top）只是当前栈顶元素的位置。</strong></p><ul><li><strong>栈空条件：S-&gt;top==-1;</strong></li><li><strong>栈满条件：S-&gt;top==MaxSize-1;</strong></li><li><strong>栈长：S-&gt;top+1;</strong><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitStack</span><span class="params">(SqStack *S)</span></span>&#123;</span><br><span class="line">S-&gt;top = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序栈初始化成功\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack *S)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序栈为空\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序栈不为空\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack *S,ElemType x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S-&gt;top == MaxSize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">S-&gt;data[++S-&gt;top] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack *S,ElemType x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前栈已经为空！\n"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = S-&gt;data[S-&gt;top--];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈顶元素出栈\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetTop</span><span class="params">(SqStack *S,ElemType x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序栈当前为空；\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = S-&gt;data[S-&gt;top];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前栈顶元素为 %d\n"</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateStack</span><span class="params">(SqStack *S,ElemType a[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,e;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入栈："</span>); </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e);</span><br><span class="line">a[i] = e;</span><br><span class="line">Push(S,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(SqStack *S)</span></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序栈销毁\n"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(SqStack *S,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,&amp;S-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqStack *s;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>],e;</span><br><span class="line">s=(SqStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqStack));</span><br><span class="line">InitStack(s);</span><br><span class="line">CreateStack(s,a,<span class="number">5</span>);</span><br><span class="line">GetTop(s,e);</span><br><span class="line">Pop(s,e);</span><br><span class="line">StackEmpty(s);</span><br><span class="line">DestroyStack(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h2&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之顺序表</title>
    <link href="http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://maskxman.github.io/2020/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-04-12T11:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a id="more"></a><p>&emsp;&emsp;进了IT， 数据结构可谓是核心的核心，必须搞得明明白白的， 博主由于转专业原因数据结构基础真的是<br>渣到了彻底，期末痛彻心扉的考了大学最低分71啊啊啊，至此决定好好复习数据结构！由于谷歌和课本有太多的定义解释所以这篇博客只是打算记录博主敲代码实现的部分。</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><em>由于c++兼容c所以我只是在动态申请内存和释放的代码块用了C++的new和delete函数，以及io操作用的c++的cin和cout，编程思想并没有使用c++的面向对象编程，我只是打算复习一下算法顺便实现，<br>考试的时候写的是伪代码。</em></p><p><strong>这里有一个小知识是我刚接触c和c++遇到的：“.”和‘-&gt;’的区别。 这里告诉大家这个小细节，c++中当定义类对象是指针对象时候，就需要用到“-&gt;”指向类中的成员，当定义一般对象时候就需要用到‘.‘指向类中的成员</strong></p><p><strong>自己傻瓜式理解就是：-&gt;左边必须是指针.左边必须是实体</strong></p><p>其他的注意一下：</p><ul><li>动态分配内存的时候必须是成对出现的，也就是说new和delete必需存在，敲代码的时候尽量同时写以免后面忘记，忘记的后果就是如果你没释放内存，嗯，他就会占着！很严重！！很严重！！！</li><li>c里面你基本都是指针，c++你可以直接用引用，我为了少敲一个&gt;所以都用的是.了。<h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2></li><li>这个代码是我自己写的，没有一点照搬，我初心只是为了帮助我理解算法，快速实现一下我的思路对不对，我的建议是不要用我这样说c不c说c++不c++的方式写，用c++就用oop思想写，这才是正道，用c就不要整花里胡哨的cin，cout，还有一定要遵守代码规范，像python的PEP8，代码是给人看到，虽然现在不涉及后期优化什么的，但是优雅的代码真的会潜移默化的提升自己（这里重点吐槽tab和空格混用的小哥哥小姐姐，让python程序员简直头秃！）当然如果你和我一样只是为了理解算法，请接着往下看*<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType *data;</span><br><span class="line"><span class="keyword">int</span> Length,Maxsize;</span><br><span class="line">&#125;Seqlist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(Seqlist &amp;L, ElemType a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">L.data[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">L.Length = n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(Seqlist&amp; L)</span> </span>&#123;</span><br><span class="line">L.Length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(Seqlist L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.Length; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L.data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(Seqlist&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"顺序表的长度为："</span>&lt;&lt;L.Length &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> L.Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Seqlist L, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.Length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(Seqlist L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInert</span><span class="params">(Seqlist&amp; L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;L.Length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (L.Length &gt; InitSize) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = L.Length; j &gt;= i; j--) &#123;</span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">L.Length++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"此时插入"</span> &lt;&lt; e &lt;&lt; <span class="string">"的顺序表为："</span>;</span><br><span class="line">PrintList(L);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(Seqlist&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.Length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e = L.data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.Length; j++) &#123;</span><br><span class="line">L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">&#125;</span><br><span class="line">L.Length--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除后的顺序表为："</span>;</span><br><span class="line">PrintList(L);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DesetroyList</span><span class="params">(Seqlist&amp; L)</span> </span>&#123; </span><br><span class="line"><span class="keyword">delete</span>(L.data);</span><br><span class="line">L.Length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顺序表成功删除"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(Seqlist L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (L.Length == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Seqlist L;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">7</span>], e;</span><br><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入元素:"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">CreateList(L, a, <span class="number">5</span>);</span><br><span class="line">Length(L);</span><br><span class="line">LocateElem(L, <span class="number">2</span>);</span><br><span class="line">GetElem(L, <span class="number">3</span>);</span><br><span class="line">ListInert(L, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">Length(L);</span><br><span class="line">ListDelete(L, <span class="number">2</span>, e);</span><br><span class="line">DesetroyList(L);</span><br><span class="line">Length(L);</span><br><span class="line">Empty(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://maskxman.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>闲聊1.0</title>
    <link href="http://maskxman.github.io/2020/07/10/%E9%97%B2%E8%81%8A1.0/"/>
    <id>http://maskxman.github.io/2020/07/10/%E9%97%B2%E8%81%8A1.0/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-05-21T13:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初入博客"><a href="#初入博客" class="headerlink" title="初入博客"></a>初入博客</h2><hr><p>第一次建博客花费了大概3天左右，从html css什么都不会，到完整看完基于hexo的volantis的主</p><a id="more"></a>题博客的官方文档，获益匪浅。对于前端的世界算是偷窥一角，这种所写即所得的感觉着实太好了，看到自己改完的博客框架很有满足感。在这个博客中，我会把我学习的知识在其中分享。<h3 id="本站是技术博客，欢迎各位道友！"><a href="#本站是技术博客，欢迎各位道友！" class="headerlink" title="本站是技术博客，欢迎各位道友！"></a>本站是技术博客，欢迎各位道友！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初入博客&quot;&gt;&lt;a href=&quot;#初入博客&quot; class=&quot;headerlink&quot; title=&quot;初入博客&quot;&gt;&lt;/a&gt;初入博客&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;第一次建博客花费了大概3天左右，从html css什么都不会，到完整看完基于hexo的volantis的主&lt;/p&gt;
    
    </summary>
    
    
      <category term="个人生活" scheme="http://maskxman.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人生活" scheme="http://maskxman.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>闲聊2.0</title>
    <link href="http://maskxman.github.io/2020/07/10/%E9%97%B2%E8%81%8A2.0/"/>
    <id>http://maskxman.github.io/2020/07/10/%E9%97%B2%E8%81%8A2.0/</id>
    <published>2020-07-10T12:14:30.000Z</published>
    <updated>2020-05-08T06:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;大概有半个月没有更新博客了，最近一直在忙互联网＋和大创项目。着实有些头秃，励志做一个后端开发者，结果却在半年时间内接触了cocos creator游戏引擎，微信小游戏，微信公众号，微信小程序，虽然之前挑战杯做微信小游戏之后让我接到了外包拿到了人生第一桶金但是我依旧想走后端路线啊啊啊啊啊啊，在前端的路上渐行渐远，Java的heap和stack垃圾回收还没搞明白，Head First Java也才读了一半，数据结构刚复习到了树，英语六级也不知道考不考，高数魏尔斯定理那么重要我题还没看，，，，，我裂开了，最近在学习小程序，我会同步更新学习进度和资料的。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;大概有半个月没有更新博客了，最近一直在忙互联网＋和大创项目。着实有些头秃，励志做一个后端开发者，结果却在半年时间内接触了cocos creator游戏引擎，微信小游戏，微信公众号，微信小程序，虽然之前挑战杯做微信小游戏之后让我接到了外包拿到了人生第一
      
    
    </summary>
    
    
      <category term="个人生活" scheme="http://maskxman.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人生活" scheme="http://maskxman.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
